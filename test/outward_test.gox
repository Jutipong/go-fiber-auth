package test

import (
	"conrms-outward-fee/app/outward/model"
	"conrms-outward-fee/app/outward/repository"
	"conrms-outward-fee/app/outward/service"
	"conrms-outward-fee/pkg/enum"
	"conrms-outward-fee/pkg/master"
	"conrms-outward-fee/pkg/utils"
	"testing"

	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/assert"
)

func Test_Br_FCD_1(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "FADE68C2-8AE2-432B-B488-49F39EB14DD8",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 500,
			Max:                 800,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "AUD",
			FeeDetailID:         "d9e42571-d9ed-4aa3-bc2f-2f1180715c3b",
			PercentAmt:          1133.0524125,
			CustomerFeeDetailID: "",
			ProductType:         "",
		},
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "AUD",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "AUD",
			FixAmount:           1100,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "AUD",
			FeeDetailID:         "6fd80f57-cba1-487b-b822-9a2e0ed59ac7",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
		},
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "AUD",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "AUD",
			FixAmount:           499,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "AUD",
			FeeDetailID:         "50ae18e3-d5a0-4369-ad99-ce0612962fff",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
		},
		{
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "AUD",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 550,
			Max:                 1000,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "AUD",
			FeeDetailID:         "664f658f-bc2f-454c-bd2a-004bb30ab6e7",
			PercentAmt:          5665.2620625,
			CustomerFeeDetailID: "",
			ProductType:         "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005152302",
		TransDate: "20210825",
		TransTime: "15:23:02",
		Detail: model.ReqDetail{
			AccountNo:       "800000118889",
			CifNo:           "3800039",
			FeeChannel:      "SWIFT",
			TransactionType: "FCD",
			ChargeType:      "OUR",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "AU",
			Purpose:         "318004",
			FromCCY:         "AUD",
			ToCCY:           "AUD",
			AmountFrom:      15000.00,
			AmountTo:        15000.00,
			ExchangeRate:    30.214731,
			EffectiveDate:   "20210825",
		},
	}
	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeRefID:      "50ae18e3-d5a0-4369-ad99-ce0612962fff",
			FeeType:       "OUTWARD FEE",
			FeeAmount:     16.52,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(16.52),
			FeeCCY:        "AUD",
			FeeCategory:   "Standard",
			FeeTypeId:     6,
		},
		{
			FeeRefID:      "664f658f-bc2f-454c-bd2a-004bb30ab6e7",
			FeeType:       "COM IN LIEU",
			FeeAmount:     33.1,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(33.10),
			FeeCCY:        "AUD",
			FeeCategory:   "Standard",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_FCD_2(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "FADE68C2-8AE2-432B-B488-49F39EB14DD8",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 500,
			Max:                 800,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "AUD",
			FeeDetailID:         "d9e42571-d9ed-4aa3-bc2f-2f1180715c3b",
			PercentAmt:          264.37889625,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "AUD",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 500,
			Max:                 1000,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "AUD",
			FeeDetailID:         "8f42dd13-2d56-409c-8815-1f9c9c5d3151",
			PercentAmt:          581.6335717500001,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "AUD",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 550,
			Max:                 1000,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "AUD",
			FeeDetailID:         "664f658f-bc2f-454c-bd2a-004bb30ab6e7",
			PercentAmt:          1321.8944812500001,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005153307",
		TransDate: "20210825",
		TransTime: "15:33:07",
		Detail: model.ReqDetail{
			AccountNo:       "800000118889",
			CifNo:           "3800039",
			FeeChannel:      "SWIFT",
			TransactionType: "FCD",
			ChargeType:      "BEN",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "AU",
			Purpose:         "318004",
			FromCCY:         "AUD",
			ToCCY:           "AUD",
			AmountFrom:      3500,
			AmountTo:        3500,
			ExchangeRate:    30.214731,
			EffectiveDate:   "20210825",
		},
	}
	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     19.25,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(19.25),
			FeeCCY:        "AUD",
			FeeCategory:   "Standard",
			FeeRefID:      "8f42dd13-2d56-409c-8815-1f9c9c5d3151",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     33.1,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(33.10),
			FeeCCY:        "AUD",
			FeeCategory:   "Standard",
			FeeRefID:      "664f658f-bc2f-454c-bd2a-004bb30ab6e7",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_FCD_3_MIN(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "FADE68C2-8AE2-432B-B488-49F39EB14DD8",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 500,
			Max:                 800,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "HKD",
			FeeDetailID:         "d9e42571-d9ed-4aa3-bc2f-2f1180715c3b",
			PercentAmt:          264.37889625,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "HKD",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "HKD",
			FixAmount:           1100,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "HKD",
			FeeDetailID:         "6fd80f57-cba1-487b-b822-9a2e0ed59ac7",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005153307",
		TransDate: "20210825",
		TransTime: "15:33:07",
		Detail: model.ReqDetail{
			AccountNo:       "800000118889",
			CifNo:           "3800039",
			FeeChannel:      "SWIFT",
			TransactionType: "FCD",
			ChargeType:      "OUR",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "AU",
			Purpose:         "318004",
			FromCCY:         "HKD",
			ToCCY:           "HKD",
			AmountFrom:      3500,
			AmountTo:        3500,
			ExchangeRate:    30.214731,
			EffectiveDate:   "20210825",
		},
	}
	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     1100,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(1100.00),
			FeeCCY:        "HKD",
			FeeCategory:   "Standard",
			FeeRefID:      "6fd80f57-cba1-487b-b822-9a2e0ed59ac7",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     16.55,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(16.55),
			FeeCCY:        "HKD",
			FeeCategory:   "Standard",
			FeeRefID:      "d9e42571-d9ed-4aa3-bc2f-2f1180715c3b",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_FCD_3_MAX(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "FADE68C2-8AE2-432B-B488-49F39EB14DD8",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 500,
			Max:                 800,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "HKD",
			FeeDetailID:         "d9e42571-d9ed-4aa3-bc2f-2f1180715c3b",
			PercentAmt:          755.368275,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "HKD",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "HKD",
			FixAmount:           1100,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "HKD",
			FeeDetailID:         "6fd80f57-cba1-487b-b822-9a2e0ed59ac7",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005153307",
		TransDate: "20210408",
		TransTime: "15:33:07",
		Detail: model.ReqDetail{
			AccountNo:       "800000118889",
			CifNo:           "3800039",
			FeeChannel:      "SWIFT",
			TransactionType: "FCD",
			ChargeType:      "OUR",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "AU",
			Purpose:         "318004",
			FromCCY:         "HKD",
			ToCCY:           "HKD",
			AmountFrom:      10000,
			AmountTo:        10000,
			ExchangeRate:    30.214731,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     1100,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(1100.00),
			FeeCCY:        "HKD",
			FeeCategory:   "Standard",
			FeeRefID:      "6fd80f57-cba1-487b-b822-9a2e0ed59ac7",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     25,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(25.00),
			FeeCCY:        "HKD",
			FeeCategory:   "Standard",
			FeeRefID:      "d9e42571-d9ed-4aa3-bc2f-2f1180715c3b",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_THB_4(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "GBP",
			BenCountry:          "GB",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           1200,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "8859ecf0-d869-4c60-8850-c5818daf012d",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "OTH",
			Min:                 500,
			Max:                 550,
			MinMaxCCY:           "OTH",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "OTH",
			FeeDetailID:         "04ede948-5434-4991-8027-993dc0d875e8",
			PercentAmt:          2.7710000000000004,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "GBP",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "1",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           499,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "0bf79393-db04-454e-acdd-69f3f860ee76",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005164805",
		TransDate: "20210825",
		TransTime: "16:48:05",
		Detail: model.ReqDetail{
			AccountNo:       "800000128213",
			CifNo:           "31361841",
			FeeChannel:      "SWIFT",
			TransactionType: "THB",
			ChargeType:      "BEN",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "GB",
			Purpose:         "318004",
			FromCCY:         "THB",
			ToCCY:           "GBP",
			AmountFrom:      1500,
			AmountTo:        27.71,
			ExchangeRate:    54.130164,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     499.00,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(499.00),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "0bf79393-db04-454e-acdd-69f3f860ee76",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_THB_5(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "1F7D5E2F-E2A8-482D-B689-47FFC3CE1374",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "EUR",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "EUR",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           10,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "8188d225-ab32-4863-ba11-759c78549e9d",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210407003022100604",
		TransDate: "20210407",
		TransTime: "10:06:04",
		Detail: model.ReqDetail{
			AccountNo:       "1410741",
			CifNo:           "100249",
			FeeChannel:      "SWIFT",
			TransactionType: "THB",
			ChargeType:      "OUR",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "EU",
			Purpose:         "318013",
			FromCCY:         "THB",
			ToCCY:           "EUR",
			AmountFrom:      5488.71,
			AmountTo:        150,
			ExchangeRate:    36.59143,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     365.91,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(365.91),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "8188d225-ab32-4863-ba11-759c78549e9d",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_THB_6_1(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "1F7D5E2F-E2A8-482D-B689-47FFC3CE1374",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "OTH",
			Min:                 500,
			Max:                 550,
			MinMaxCCY:           "OTH",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "OTH",
			FeeDetailID:         "04ede948-5434-4991-8027-993dc0d875e8",
			PercentAmt:          15,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210407003022100604",
		TransDate: "20210407",
		TransTime: "10:06:04",
		Detail: model.ReqDetail{
			AccountNo:       "1410741",
			CifNo:           "100249",
			FeeChannel:      "SWIFT",
			TransactionType: "THB",
			ChargeType:      "BEN",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "EU",
			Purpose:         "318013",
			FromCCY:         "THB",
			ToCCY:           "EUR",
			AmountFrom:      5488.71,
			AmountTo:        150,
			ExchangeRate:    36.59143,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     500,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(500.00),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "04ede948-5434-4991-8027-993dc0d875e8",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_THB_6_2(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "1F7D5E2F-E2A8-482D-B689-47FFC3CE1374",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "OTH",
			Min:                 500,
			Max:                 550,
			MinMaxCCY:           "OTH",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "OTH",
			FeeDetailID:         "04ede948-5434-4991-8027-993dc0d875e8",
			PercentAmt:          506,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210407003022100604",
		TransDate: "20210407",
		TransTime: "10:06:04",
		Detail: model.ReqDetail{
			AccountNo:       "1410741",
			CifNo:           "100249",
			FeeChannel:      "SWIFT",
			TransactionType: "THB",
			ChargeType:      "BEN",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "EU",
			Purpose:         "318013",
			FromCCY:         "THB",
			ToCCY:           "EUR",
			AmountFrom:      5488.71,
			AmountTo:        5060,
			ExchangeRate:    36.59143,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     506,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(506.00),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "04ede948-5434-4991-8027-993dc0d875e8",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_THB_6_3(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "73aeaeb7-0947-4ef9-a345-5d7563d1bb3f",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "OTH",
			Min:                 500,
			Max:                 550,
			MinMaxCCY:           "OTH",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "OTH",
			FeeDetailID:         "04ede948-5434-4991-8027-993dc0d875e8",
			PercentAmt:          596,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005164805",
		TransDate: "20210408",
		TransTime: "16:48:05",
		Detail: model.ReqDetail{
			AccountNo:       "800000128213",
			CifNo:           "31361841",
			FeeChannel:      "SWIFT",
			TransactionType: "THB",
			ChargeType:      "OUR",
			OrderingType:    "retail",
			SearchPayInFull: "Y",
			BenCountry:      "GB",
			Purpose:         "318004",
			FromCCY:         "THB",
			ToCCY:           "GBP",
			AmountFrom:      1500,
			AmountTo:        1500,
			ExchangeRate:    54.130164,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     550,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(550.00),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "04ede948-5434-4991-8027-993dc0d875e8",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_THB_7(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "73aeaeb7-0947-4ef9-a345-5d7563d1bb3f",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "GBP",
			BenCountry:          "GB",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           1200,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "8859ecf0-d869-4c60-8850-c5818daf012d",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005164805",
		TransDate: "20210408",
		TransTime: "16:48:05",
		Detail: model.ReqDetail{
			AccountNo:       "800000128213",
			CifNo:           "31361841",
			FeeChannel:      "SWIFT",
			TransactionType: "THB",
			ChargeType:      "OUR",
			OrderingType:    "retail",
			SearchPayInFull: "Y",
			BenCountry:      "GB",
			Purpose:         "318004",
			FromCCY:         "THB",
			ToCCY:           "GBP",
			AmountFrom:      1500,
			AmountTo:        1500,
			ExchangeRate:    54.130164,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     1200,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(1200.00),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "8859ecf0-d869-4c60-8850-c5818daf012d",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_THB_8(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "1F7D5E2F-E2A8-482D-B689-47FFC3CE1374",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "OTH",
			Min:                 500,
			Max:                 550,
			MinMaxCCY:           "OTH",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "OTH",
			FeeDetailID:         "04ede948-5434-4991-8027-993dc0d875e8",
			PercentAmt:          15,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "PayinFull",
			CCY:                 "EUR",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           15,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "97fd0e7e-c5a6-45ff-a380-3f61029aef45",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210407003022100604",
		TransDate: "20210407",
		TransTime: "10:06:04",
		Detail: model.ReqDetail{
			AccountNo:       "1410741",
			CifNo:           "100249",
			FeeChannel:      "SWIFT",
			TransactionType: "THB",
			ChargeType:      "BEN",
			OrderingType:    "corp",
			SearchPayInFull: "Y",
			BenCountry:      "EU",
			Purpose:         "318013",
			FromCCY:         "THB",
			ToCCY:           "EUR",
			AmountFrom:      5488.71,
			AmountTo:        150,
			ExchangeRate:    36.59143,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     15,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(15.00),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "97fd0e7e-c5a6-45ff-a380-3f61029aef45",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_THB_9(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "1",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           499,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "d07500ac-fd47-47fd-a184-2fbaaa5bd7fb",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210405003005112716",
		TransDate: "20210405",
		TransTime: "11:27:16",
		Detail: model.ReqDetail{
			AccountNo:       "371890",
			CifNo:           "31362289",
			FeeChannel:      "NIUM",
			TransactionType: "THB",
			ChargeType:      "BEN",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "US",
			Purpose:         "318004",
			FromCCY:         "THB",
			ToCCY:           "USD",
			AmountFrom:      45210,
			AmountTo:        1500,
			ExchangeRate:    30.14,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     499,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(499.00),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "d07500ac-fd47-47fd-a184-2fbaaa5bd7fb",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_Br_THB_10(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "1F7D5E2F-E2A8-482D-B689-47FFC3CE1374",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "USD",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           1100,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "540fc9dd-b56e-421c-88ac-4a269d38336d",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "USD",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "1",
			FeeCCY:              "THB",
			Min:                 1000,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "2645d1c2-5bc5-4e38-b897-573760d809a6",
			PercentAmt:          1507,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210407003010140622",
		TransDate: "20210407",
		TransTime: "14:06:22",
		Detail: model.ReqDetail{
			AccountNo:       "1410741",
			CifNo:           "100249",
			FeeChannel:      "NIUM",
			TransactionType: "THB",
			ChargeType:      "OUR",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "US",
			Purpose:         "318004",
			FromCCY:         "THB",
			ToCCY:           "USD",
			AmountFrom:      15070,
			AmountTo:        500,
			ExchangeRate:    30.14,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     2607,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(2607.00),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "2645d1c2-5bc5-4e38-b897-573760d809a6",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_NonC_THB_11(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "1F7D5E2F-E2A8-482D-B689-47FFC3CE1374",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "1",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           25,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "5a878365-096b-423e-91d8-39f5ad1c572f",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210407003010140622",
		TransDate: "20210407",
		TransTime: "14:06:22",
		Detail: model.ReqDetail{
			AccountNo:       "1410741",
			CifNo:           "100249",
			FeeChannel:      "NIUM",
			TransactionType: "THB",
			ChargeType:      "OUR",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "US",
			Purpose:         "318004",
			FromCCY:         "THB",
			ToCCY:           "USD",
			AmountFrom:      15070,
			AmountTo:        500,
			ExchangeRate:    30.14,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     25,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(25.00),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "5a878365-096b-423e-91d8-39f5ad1c572f",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_NonC_THB_12(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "1F7D5E2F-E2A8-482D-B689-47FFC3CE1374",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "SGD",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 800,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "58d3ccd4-ad86-4f4e-9d55-28d5a0afc63c",
			PercentAmt:          1140.8,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210407003022101219",
		TransDate: "20210407",
		TransTime: "10:12:19",
		Detail: model.ReqDetail{
			AccountNo:       "1410741",
			CifNo:           "100249",
			FeeChannel:      "NIUM",
			TransactionType: "THB",
			ChargeType:      "OUR",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "SG",
			Purpose:         "318015",
			FromCCY:         "THB",
			ToCCY:           "SGD",
			AmountFrom:      22816.00,
			AmountTo:        1000,
			ExchangeRate:    22.816,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     1140.8,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(1140.80),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "58d3ccd4-ad86-4f4e-9d55-28d5a0afc63c",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_NonC_THB_13(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "GBP",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 500,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "GBP",
			FeeDetailID:         "d28931bd-cca4-4845-a387-80f472616f06",
			PercentAmt:          405.97623,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "GBP",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "1",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "GBP",
			FixAmount:           499,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "GBP",
			FeeDetailID:         "4281efb6-9457-4135-bcbe-4584642d3834",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005164805",
		TransDate: "20210825",
		TransTime: "16:48:05",
		Detail: model.ReqDetail{
			AccountNo:       "800000128213",
			CifNo:           "20210825",
			FeeChannel:      "NIUM",
			TransactionType: "FCD",
			ChargeType:      "OUR",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "GB",
			Purpose:         "318004",
			FromCCY:         "GBP",
			ToCCY:           "GBP",
			AmountFrom:      1500,
			AmountTo:        1500,
			ExchangeRate:    54.130164,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     9.22,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(9.22),
			FeeCCY:        "GBP",
			FeeCategory:   "Standard",
			FeeRefID:      "4281efb6-9457-4135-bcbe-4584642d3834",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     9.24,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(9.24),
			FeeCCY:        "GBP",
			FeeCategory:   "Standard",
			FeeRefID:      "d28931bd-cca4-4845-a387-80f472616f06",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_NonC_THB_14_1(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "1",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "GBP",
			FixAmount:           14,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "ec341992-b995-4ae5-8e74-ad2fd67475eb",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "1",
			PlusTier:            "0",
			FeeCCY:              "GBP",
			Min:                 300,
			Max:                 700,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "GBP",
			FeeDetailID:         "b4aa5c3f-600a-457a-a4ae-de5075b7977e",
			PercentAmt:          8119.5246,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005164805",
		TransDate: "20210825",
		TransTime: "16:48:05",
		Detail: model.ReqDetail{
			AccountNo:       "800000128213",
			CifNo:           "20210825",
			FeeChannel:      "NIUM",
			TransactionType: "FCD",
			ChargeType:      "OUR",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "GB",
			Purpose:         "318004",
			FromCCY:         "GBP",
			ToCCY:           "GBP",
			AmountFrom:      1500,
			AmountTo:        1500,
			ExchangeRate:    54.130164,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     0.26,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(0.26),
			FeeCCY:        "GBP",
			FeeCategory:   "Standard",
			FeeRefID:      "ec341992-b995-4ae5-8e74-ad2fd67475eb",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     12.93,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(12.93),
			FeeCCY:        "GBP",
			FeeCategory:   "Standard",
			FeeRefID:      "b4aa5c3f-600a-457a-a4ae-de5075b7977e",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_NonC_THB_14_2(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerGroupID:   "",
		CustomerProfileID: "",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "1",
			PlusTier:            "0",
			FeeCCY:              "GBP",
			Min:                 300,
			Max:                 700,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "GBP",
			FeeDetailID:         "b4aa5c3f-600a-457a-a4ae-de5075b7977e",
			PercentAmt:          1623904.92,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "1",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "GBP",
			FixAmount:           24,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "GBP",
			FeeDetailID:         "bd316c95-9325-4168-9e14-6937d855a29f",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005164805",
		TransDate: "20210825",
		TransTime: "16:48:05",
		Detail: model.ReqDetail{
			AccountNo:       "",
			CifNo:           "",
			FeeChannel:      "NIUM",
			TransactionType: "FCD",
			ChargeType:      "BEN",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "GB",
			Purpose:         "318004",
			FromCCY:         "GBP",
			ToCCY:           "GBP",
			AmountFrom:      300000,
			AmountTo:        300000,
			ExchangeRate:    54.130164,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     0.44,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(0.44),
			FeeCCY:        "GBP",
			FeeCategory:   "Standard",
			FeeRefID:      "bd316c95-9325-4168-9e14-6937d855a29f",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     12.93,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(12.93),
			FeeCCY:        "GBP",
			FeeCategory:   "Standard",
			FeeRefID:      "b4aa5c3f-600a-457a-a4ae-de5075b7977e",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_NonC_THB_15_ROUND(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "JPY",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "JPY",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "JPY",
			FixAmount:           1000,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "JPY",
			FeeDetailID:         "666f42e7-3de0-4523-9d12-5e77632807a8",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "JPY",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "JPY",
			Min:                 5000,
			Max:                 9999999999999,
			MinMaxCCY:           "JPY",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "JPY",
			FeeDetailID:         "52d5dcdb-2f4b-4a70-b282-79bbeaa2c1f4",
			PercentAmt:          6749.25,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005164805",
		TransDate: "20210825",
		TransTime: "16:48:05",
		Detail: model.ReqDetail{
			AccountNo:       "",
			CifNo:           "",
			FeeChannel:      "NIUM",
			TransactionType: "FCD",
			ChargeType:      "BEN",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "JP",
			Purpose:         "318004",
			FromCCY:         "JPY",
			ToCCY:           "JPY",
			AmountFrom:      899900,
			AmountTo:        899900,
			ExchangeRate:    30.130164,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     1000,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(1000.00),
			FeeCCY:        "JPY",
			FeeCategory:   "Standard",
			FeeRefID:      "666f42e7-3de0-4523-9d12-5e77632807a8",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     6749,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(6749.00),
			FeeCCY:        "JPY",
			FeeCategory:   "Standard",
			FeeRefID:      "52d5dcdb-2f4b-4a70-b282-79bbeaa2c1f4",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_NonC_THB_15_MIN(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "JPY",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "JPY",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "JPY",
			FixAmount:           1000,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "JPY",
			FeeDetailID:         "666f42e7-3de0-4523-9d12-5e77632807a8",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "JPY",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "JPY",
			Min:                 5000,
			Max:                 9999999999999,
			MinMaxCCY:           "JPY",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "JPY",
			FeeDetailID:         "52d5dcdb-2f4b-4a70-b282-79bbeaa2c1f4",
			PercentAmt:          37.5,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005164805",
		TransDate: "20210825",
		TransTime: "16:48:05",
		Detail: model.ReqDetail{
			AccountNo:       "",
			CifNo:           "",
			FeeChannel:      "NIUM",
			TransactionType: "FCD",
			ChargeType:      "BEN",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "JP",
			Purpose:         "318004",
			FromCCY:         "JPY",
			ToCCY:           "JPY",
			AmountFrom:      5000,
			AmountTo:        5000,
			ExchangeRate:    30.130164,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     1000,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(1000.00),
			FeeCCY:        "JPY",
			FeeCategory:   "Standard",
			FeeRefID:      "666f42e7-3de0-4523-9d12-5e77632807a8",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     5000,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(5000.00),
			FeeCCY:        "JPY",
			FeeCategory:   "Standard",
			FeeRefID:      "52d5dcdb-2f4b-4a70-b282-79bbeaa2c1f4",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_Customer_1(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerProfileID: "73aeaeb7-0947-4ef9-a345-5d7563d1bb3f",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeAcct",
			ChargeType:          "OUR",
			CCY:                 "GBP",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "GBP",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "GBP",
			FixAmount:           3000,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "GBP",
			FeeDetailID:         "b1c1973f-4ff0-423f-8879-efa14fb0e62e",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		}, {
			FeeTypeID:           8,
			FeeCategory:         "FeeAcct",
			ChargeType:          "OUR",
			CCY:                 "GBP",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "GBP",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "GBP",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "GBP",
			FeeDetailID:         "25fcb6d1-ef5a-4c1a-92cc-0a1a42c7a514",
			PercentAmt:          150,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeCIF",
			ChargeType:          "OUR",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "GBP",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "GBP",
			FixAmount:           10,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "GBP",
			FeeDetailID:         "3cad6e82-011d-4319-8d15-fb100afc603d",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		}, {
			FeeTypeID:           8,
			FeeCategory:         "FeeCIF",
			ChargeType:          "OUR",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "GBP",
			Min:                 100,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "GBP",
			FeeDetailID:         "72f29fea-9718-4fb9-b750-ad6fcba174f4",
			PercentAmt:          81.195246,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		},
	}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "GBP",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 500,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "GBP",
			FeeDetailID:         "d28931bd-cca4-4845-a387-80f472616f06",
			PercentAmt:          405.97623,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "GBP",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "1",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "GBP",
			FixAmount:           499,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "GBP",
			FeeDetailID:         "4281efb6-9457-4135-bcbe-4584642d3834",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005172704",
		TransDate: "20210408",
		TransTime: "17:27:04",
		Detail: model.ReqDetail{
			AccountNo:       "800000128335",
			CifNo:           "31361841",
			FeeChannel:      "NIUM",
			TransactionType: "FCD",
			ChargeType:      "OUR",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "GB",
			Purpose:         "318004",
			FromCCY:         "GBP",
			ToCCY:           "GBP",
			AmountFrom:      1500,
			AmountTo:        1500,
			ExchangeRate:    54.130164,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     9.22,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(9.22),
			FeeCCY:        "GBP",
			FeeCategory:   "Standard",
			FeeRefID:      "4281efb6-9457-4135-bcbe-4584642d3834",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     9.24,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(9.24),
			FeeCCY:        "GBP",
			FeeCategory:   "Standard",
			FeeRefID:      "d28931bd-cca4-4845-a387-80f472616f06",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_Customer_2(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerProfileID: "73aeaeb7-0947-4ef9-a345-5d7563d1bb3f",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeCIF",
			ChargeType:          "OUR",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "USD",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "USD",
			FixAmount:           10,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "USD",
			FeeDetailID:         "3cad6e82-011d-4319-8d15-fb100afc603d",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		}, {
			FeeTypeID:           8,
			FeeCategory:         "FeeCIF",
			ChargeType:          "OUR",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "USD",
			Min:                 100,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "USD",
			FeeDetailID:         "72f29fea-9718-4fb9-b750-ad6fcba174f4",
			PercentAmt:          120,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		},
	}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005172704",
		TransDate: "20210408",
		TransTime: "17:27:04",
		Detail: model.ReqDetail{
			AccountNo:       "800000128335",
			CifNo:           "31361841",
			FeeChannel:      "NIUM",
			TransactionType: "FCD",
			ChargeType:      "OUR",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "US",
			Purpose:         "318004",
			FromCCY:         "USD",
			ToCCY:           "USD",
			AmountFrom:      3000,
			AmountTo:        3000,
			ExchangeRate:    40,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     10,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(10.00),
			FeeCCY:        "USD",
			FeeCategory:   "Customer",
			FeeRefID:      "3cad6e82-011d-4319-8d15-fb100afc603d",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     3,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(3.00),
			FeeCCY:        "USD",
			FeeCategory:   "Customer",
			FeeRefID:      "72f29fea-9718-4fb9-b750-ad6fcba174f4",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_Customer_3(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerProfileID: "FADE68C2-8AE2-432B-B488-49F39EB14DD8",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeAcct",
			ChargeType:          "",
			CCY:                 "USD",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "USD",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           250,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "USD",
			FeeDetailID:         "7c7153b7-780c-40bd-96ef-e829637b9bf8",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		},
	}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "USD",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           1100,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "540fc9dd-b56e-421c-88ac-4a269d38336d",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "USD",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "1",
			FeeCCY:              "THB",
			Min:                 1000,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "2645d1c2-5bc5-4e38-b897-573760d809a6",
			PercentAmt:          4521,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005091330",
		TransDate: "20210825",
		TransTime: "09:13:30",
		Detail: model.ReqDetail{
			AccountNo:       "00348104",
			CifNo:           "3800039",
			FeeChannel:      "NIUM",
			TransactionType: "THB",
			ChargeType:      "OUR",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "US",
			Purpose:         "318004",
			FromCCY:         "THB",
			ToCCY:           "USD",
			AmountFrom:      45210,
			AmountTo:        1500,
			ExchangeRate:    30.14,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     250,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(250.00),
			FeeCCY:        "THB",
			FeeCategory:   "Customer",
			FeeRefID:      "7c7153b7-780c-40bd-96ef-e829637b9bf8",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_Customer_4(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerProfileID: "73aeaeb7-0947-4ef9-a345-5d7563d1bb3f",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeCIF",
			ChargeType:          "OUR",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "USD",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "USD",
			FixAmount:           10,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "USD",
			FeeDetailID:         "3cad6e82-011d-4319-8d15-fb100afc603d",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		}, {
			FeeTypeID:           8,
			FeeCategory:         "FeeCIF",
			ChargeType:          "OUR",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "USD",
			Min:                 100,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "USD",
			FeeDetailID:         "72f29fea-9718-4fb9-b750-ad6fcba174f4",
			PercentAmt:          120,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		},
	}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           8,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 500,
			Max:                 800,
			MinMaxCCY:           "THB",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "USD",
			FeeDetailID:         "d9e42571-d9ed-4aa3-bc2f-2f1180715c3b",
			PercentAmt:          300,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "OUR",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "USD",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "USD",
			FixAmount:           1100,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "USD",
			FeeDetailID:         "6fd80f57-cba1-487b-b822-9a2e0ed59ac7",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005172704",
		TransDate: "20210408",
		TransTime: "17:27:04",
		Detail: model.ReqDetail{
			AccountNo:       "",
			CifNo:           "31361841",
			FeeChannel:      "SWIFT",
			TransactionType: "FCD",
			ChargeType:      "OUR",
			OrderingType:    "retail",
			SearchPayInFull: "N",
			BenCountry:      "US",
			Purpose:         "318004",
			FromCCY:         "USD",
			ToCCY:           "USD",
			AmountFrom:      3000,
			AmountTo:        3000,
			ExchangeRate:    40,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     10,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(10.00),
			FeeCCY:        "USD",
			FeeCategory:   "Customer",
			FeeRefID:      "3cad6e82-011d-4319-8d15-fb100afc603d",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     3,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(3.00),
			FeeCCY:        "USD",
			FeeCategory:   "Customer",
			FeeRefID:      "72f29fea-9718-4fb9-b750-ad6fcba174f4",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_Customer_5(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerProfileID: "73aeaeb7-0947-4ef9-a345-5d7563d1bb3f",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{
		{
			FeeTypeID:           8,
			FeeCategory:         "FeeCIF",
			ChargeType:          "BEN/SHA",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           650,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "0f7d54a5-da6b-4316-bf79-dcb0ea12556a",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeCIF",
			ChargeType:          "BEN/SHA",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "OTH",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           2,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "OTH",
			FeeDetailID:         "2977040e-68cc-4694-9235-cc5bb389caa0",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeCIF",
			ChargeType:          "BEN/SHA",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "",
			PlusTier:            "",
			FeeCCY:              "OTH",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           1,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "OTH",
			FeeDetailID:         "4220bcd4-5e5f-41d3-9251-ebd08233d0bc",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "Outward",
			DataType:            "",
		},
	}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "OTH",
			Min:                 500,
			Max:                 550,
			MinMaxCCY:           "OTH",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "OTH",
			FeeDetailID:         "04ede948-5434-4991-8027-993dc0d875e8",
			PercentAmt:          300,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           34,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "32c7fb50-e23e-403e-ac7f-0b1e28f31eb9",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005172704",
		TransDate: "20210408",
		TransTime: "17:27:04",
		Detail: model.ReqDetail{
			AccountNo:       "",
			CifNo:           "31361841",
			FeeChannel:      "SWIFT",
			TransactionType: "THB",
			ChargeType:      "BEN",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "LA",
			Purpose:         "318004",
			FromCCY:         "THB",
			ToCCY:           "THB",
			AmountFrom:      3000,
			AmountTo:        3000,
			ExchangeRate:    40,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     3,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(3.00),
			FeeCCY:        "THB",
			FeeCategory:   "Customer",
			FeeRefID:      "4220bcd4-5e5f-41d3-9251-ebd08233d0bc",
			FeeTypeId:     6,
		},
		{
			FeeType:       "COM IN LIEU",
			FeeAmount:     650,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(650.00),
			FeeCCY:        "THB",
			FeeCategory:   "Customer",
			FeeRefID:      "0f7d54a5-da6b-4316-bf79-dcb0ea12556a",
			FeeTypeId:     8,
		},
	}, dataRes, "Data result not match")
}

func Test_Multi_1(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerProfileID: "73aeaeb7-0947-4ef9-a345-5d7563d1bb3f",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{
		{
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "BEN/SHA",
			CCY:                 "OTH",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "Percent",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "OTH",
			Min:                 500,
			Max:                 550,
			MinMaxCCY:           "OTH",
			FixAmount:           0,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "OTH",
			FeeDetailID:         "04ede948-5434-4991-8027-993dc0d875e8",
			PercentAmt:          12000,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		}, {
			FeeTypeID:           6,
			FeeCategory:         "FeeSTD",
			ChargeType:          "",
			CCY:                 "",
			BenCountry:          "",
			Purpose:             "",
			CalcType:            "FixAmount",
			TireFlag:            "0",
			PlusTier:            "0",
			FeeCCY:              "THB",
			Min:                 0,
			Max:                 9999999999999,
			MinMaxCCY:           "THB",
			FixAmount:           34,
			RoundOptionID:       0,
			DecimalPCT:          2,
			FinalCCY:            "THB",
			FeeDetailID:         "32c7fb50-e23e-403e-ac7f-0b1e28f31eb9",
			PercentAmt:          0,
			CustomerFeeDetailID: "",
			ProductType:         "",
			DataType:            "",
		},
	}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005172704",
		TransDate: "20210408",
		TransTime: "17:27:04",
		Detail: model.ReqDetail{
			AccountNo:       "",
			CifNo:           "31361841",
			FeeChannel:      "SWIFT",
			TransactionType: "Multi",
			ChargeType:      "BEN",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "US",
			Purpose:         "318004",
			FromCCY:         "THB",
			ToCCY:           "THB",
			AmountFrom:      3000,
			AmountTo:        120000,
			ExchangeRate:    1,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)
	assert.Equal(t, enum.Ok, code)
	assert.Equal(t, []model.Response{
		{
			FeeType:       "OUTWARD FEE",
			FeeAmount:     550,
			FeeAmountJson: utils.ConvertFloat64ToJsonNumber(550.00),
			FeeCCY:        "THB",
			FeeCategory:   "Standard",
			FeeRefID:      "04ede948-5434-4991-8027-993dc0d875e8",
			FeeTypeId:     6,
		},
	}, dataRes, "Data result not match")
}

func Test_Multi_2(t *testing.T) {
	master.InitCodeStatus()
	//Mock Data Customer
	customer := model.CustomerProfile{
		CustomerProfileID: "73aeaeb7-0947-4ef9-a345-5d7563d1bb3f",
	}
	//Mock Data CustomerFee
	customerFee := []model.BranchDatas{}
	//Mock Data StandardFee
	standardFee := []model.BranchDatas{}
	repositoryMock := repository.NewRepositoryMock(&customer, &standardFee, &customerFee)
	service := service.NewService(repositoryMock)

	req := model.Request{
		ChannelID: "CBS",
		RefId:     "CFEE210408003005172704",
		TransDate: "20210408",
		TransTime: "17:27:04",
		Detail: model.ReqDetail{
			AccountNo:       "",
			CifNo:           "31361841",
			FeeChannel:      "NIUM",
			TransactionType: "Multi",
			ChargeType:      "BEN",
			OrderingType:    "corp",
			SearchPayInFull: "N",
			BenCountry:      "US",
			Purpose:         "318004",
			FromCCY:         "THB",
			ToCCY:           "THB",
			AmountFrom:      3000,
			AmountTo:        120000,
			ExchangeRate:    1,
			EffectiveDate:   "20210825",
		},
	}

	dataRes, code, _ := service.Branch(&fiber.Ctx{}, &req)

	assert.Equal(t, enum.DataNotFound, code)
	assert.Len(t, dataRes, 0)
}
